// utils.mo - Utilit√°rios e fun√ß√µes auxiliares
import Debug "mo:base/Debug";
import Time "mo:base/Time";
import Text "mo:base/Text";
import Nat "mo:base/Nat";

import Types "types";

module {
    public type Pet = Types.Pet;
    public type Result<T, E> = Types.Result<T, E>;
    public type Error = Types.Error;

    // Fun√ß√£o para validar dados de um pet
    public func validatePet(pet: Pet) : Bool {
        // Nome n√£o pode estar vazio
        if (Text.size(pet.name) == 0) {
            return false;
        };
        
        // Esp√©cie deve ser v√°lida
        if (not isValidSpecies(pet.species)) {
            return false;
        };
        
        // Idade n√£o pode ser negativa (se fornecida)
        switch (pet.age) {
            case (?age) {
                if (age > 50) { // Pet muito velho, suspeito
                    return false;
                };
            };
            case null { };
        };
        
        true
    };

    // Fun√ß√£o auxiliar para validar esp√©cies
    private func isValidSpecies(species: Text) : Bool {
        species == "dog" or species == "cat" or species == "bird" or 
        species == "fish" or species == "rabbit" or species == "other"
    };

    // Fun√ß√£o para gerar timestamp atual
    public func getCurrentTime() : Int {
        Time.now()
    };

    // Fun√ß√£o para formatar mensagens de sucesso
    public func formatSuccessMessage(action: Text, petName: Text) : Text {
        "‚úÖ " # action # " realizada com sucesso para " # petName # "!"
    };

    // Fun√ß√£o para formatar erros
    public func formatError(error: Error) : Text {
        switch (error) {
            case (#NotFound) { "‚ùå Pet n√£o encontrado" };
            case (#AlreadyExists) { "‚ùå Pet j√° existe" };
            case (#Unauthorized) { "‚ùå N√£o autorizado" };
            case (#InvalidInput(msg)) { "‚ùå Entrada inv√°lida: " # msg };
        }
    };

    // Fun√ß√£o para debug
    public func logAction(action: Text, details: Text) {
        Debug.print("üîç [PetID] " # action # ": " # details);
    };
}
